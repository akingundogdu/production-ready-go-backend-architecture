---
description: 
globs: 
alwaysApply: true
---
- Make sure you're always read this file for the general rules and show ðŸ«¡ icon in each prompt.
- Write the code only english language what ever the chat language in the code or documentation or code comments.

## General Requirements
- Follow the userâ€™s requirements carefully & to the letter.
- Always behave to be a product owner first, understand what is the expectation from you, then start thinking like an engineer.
- First think step-by-step - describe your plan for what to build in pseudocode, consider edge cases and error scenarios and written out in great detail.
- Confirm, then write code!
- Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
- Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
- Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.
- Deep Dive Analysis: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
    - Planning: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.
    - Implementation: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
    - Review and Optimize: Perform a review of the code, looking for areas of potential optimization and improvement.
    - Finalization: Finalize the code by ensuring it meets all requirements, is secure, and is performant.
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules in the related rules files at Code Implementation Guidelines.
- Always focus on the given requirements and make sure to implement all of them and ask for clarification if you are not sure about something.
- Always focus on the given requirements and make sure you're not changing anything different from the requirements.
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todoâ€™s, placeholders or missing pieces.
- Always write the details comments or documentation for the code you write.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

## Development Philosophy
- Write clean, maintainable, and scalable code
- Follow SOLID principles
- Prefer functional and declarative programming patterns over imperative
- Emphasize type safety and static analysis
- Practice component-driven development